plugins {
    id 'java'
    id 'io.quarkus' version '3.8.3'
    id "org.sonarqube" version "4.3.0.3225"
    id "jacoco"
}

ext {
    quarkusPlatformGroupId = 'io.quarkus.platform'
    quarkusPlatformArtifactId = 'quarkus-bom'
    quarkusPlatformVersion = '3.8.3'
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")

    // REVERT to classic dependencies (your original setup)
    implementation 'io.quarkus:quarkus-resteasy'
    implementation 'io.quarkus:quarkus-resteasy-jackson'
    implementation 'io.quarkus:quarkus-rest-client'
    implementation 'io.quarkus:quarkus-rest-client-jackson'
    implementation 'io.quarkus:quarkus-hibernate-validator'
    implementation 'io.quarkus:quarkus-hibernate-orm'
    implementation 'io.quarkus:quarkus-hibernate-orm-panache'
    implementation 'io.quarkus:quarkus-jdbc-postgresql'
    implementation 'io.quarkus:quarkus-arc'
    implementation 'io.quarkus:quarkus-smallrye-openapi'

    testImplementation 'io.quarkus:quarkus-junit5'
    testImplementation "io.quarkus:quarkus-junit5-mockito"
    testImplementation 'io.rest-assured:rest-assured'
    testImplementation "org.mockito:mockito-core:5.12.0"
    testImplementation "org.mockito:mockito-junit-jupiter:5.12.0"
    testImplementation("com.github.tomakehurst:wiremock-jre8:2.35.0")
}

group = 'org.acme'
version = '1.0.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

test {
    useJUnitPlatform()
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.12"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
}

tasks.named("sonarqube") {
    dependsOn jacocoTestReport
}

sonarqube {
    properties {
        property "sonar.coverage.jacoco.xmlReportPaths", file("build/reports/jacoco/test/jacocoTestReport.xml")
    }
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}
